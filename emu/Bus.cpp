#include "Bus.hpp"
#include "BusUtil.hpp"
#include "Gpu.hpp"
#include "Joypad.hpp"
#include "Rom.hpp"
#include "Serial.hpp"
#include "Sound.hpp"
#include "Timer.hpp"

#include <algorithm>

static const Byte dmgBootrom[] =
        "\x31\xfe\xff\xaf\x21\xff\x9f\x32\xcb\x7c\x20\xfb\x21\x26\xff\x0e" \
        "\x11\x3e\x80\x32\xe2\x0c\x3e\xf3\xe2\x32\x3e\x77\x77\x3e\xfc\xe0" \
        "\x47\x11\x04\x01\x21\x10\x80\x1a\xcd\x95\x00\xcd\x96\x00\x13\x7b" \
        "\xfe\x34\x20\xf3\x11\xd8\x00\x06\x08\x1a\x13\x22\x23\x05\x20\xf9" \
        "\x3e\x19\xea\x10\x99\x21\x2f\x99\x0e\x0c\x3d\x28\x08\x32\x0d\x20" \
        "\xf9\x2e\x0f\x18\xf3\x67\x3e\x64\x57\xe0\x42\x3e\x91\xe0\x40\x04" \
        "\x1e\x02\x0e\x0c\xf0\x44\xfe\x90\x20\xfa\x0d\x20\xf7\x1d\x20\xf2" \
        "\x0e\x13\x24\x7c\x1e\x83\xfe\x62\x28\x06\x1e\xc1\xfe\x64\x20\x06" \
        "\x7b\xe2\x0c\x3e\x87\xe2\xf0\x42\x90\xe0\x42\x15\x20\xd2\x05\x20" \
        "\x4f\x16\x20\x18\xcb\x4f\x06\x04\xc5\xcb\x11\x17\xc1\xcb\x11\x17" \
        "\x05\x20\xf5\x22\x23\x22\x23\xc9\xce\xed\x66\x66\xcc\x0d\x00\x0b" \
        "\x03\x73\x00\x83\x00\x0c\x00\x0d\x00\x08\x11\x1f\x88\x89\x00\x0e" \
        "\xdc\xcc\x6e\xe6\xdd\xdd\xd9\x99\xbb\xbb\x67\x63\x6e\x0e\xec\xcc" \
        "\xdd\xdc\x99\x9f\xbb\xb9\x33\x3e\x3c\x42\xb9\xa5\xb9\xa5\x42\x3c" \
        "\x21\x04\x01\x11\xa8\x00\x1a\x13\xbe\x20\xfe\x23\x7d\xfe\x34\x20" \
        "\xf5\x06\x19\x78\x86\x23\x05\x20\xfb\x86\x20\xfe\x3e\x01\xe0\x50";

static const Byte gbcBootrom1[] =
        "\x31\xFE\xFF\x3E\x02\xC3\x7C\x00\xD3\x00\x98\xA0\x12\xD3\x00\x80" \
    "\x00\x40\x1E\x53\xD0\x00\x1F\x42\x1C\x00\x14\x2A\x4D\x19\x8C\x7E" \
    "\x00\x7C\x31\x6E\x4A\x45\x52\x4A\x00\x00\xFF\x53\x1F\x7C\xFF\x03" \
    "\x1F\x00\xFF\x1F\xA7\x00\xEF\x1B\x1F\x00\xEF\x1B\x00\x7C\x00\x00" \
    "\xFF\x03\xCE\xED\x66\x66\xCC\x0D\x00\x0B\x03\x73\x00\x83\x00\x0C" \
    "\x00\x0D\x00\x08\x11\x1F\x88\x89\x00\x0E\xDC\xCC\x6E\xE6\xDD\xDD" \
    "\xD9\x99\xBB\xBB\x67\x63\x6E\x0E\xEC\xCC\xDD\xDC\x99\x9F\xBB\xB9" \
    "\x33\x3E\x3C\x42\xB9\xA5\xB9\xA5\x42\x3C\x58\x43\xE0\x70\x3E\xFC" \
    "\xE0\x47\xCD\x75\x02\xCD\x00\x02\x26\xD0\xCD\x03\x02\x21\x00\xFE" \
    "\x0E\xA0\xAF\x22\x0D\x20\xFC\x11\x04\x01\x21\x10\x80\x4C\x1A\xE2" \
    "\x0C\xCD\xC6\x03\xCD\xC7\x03\x13\x7B\xFE\x34\x20\xF1\x11\x72\x00" \
    "\x06\x08\x1A\x13\x22\x23\x05\x20\xF9\xCD\xF0\x03\x3E\x01\xE0\x4F" \
    "\x3E\x91\xE0\x40\x21\xB2\x98\x06\x4E\x0E\x44\xCD\x91\x02\xAF\xE0" \
    "\x4F\x0E\x80\x21\x42\x00\x06\x18\xF2\x0C\xBE\x20\xFE\x23\x05\x20" \
    "\xF7\x21\x34\x01\x06\x19\x78\x86\x2C\x05\x20\xFB\x86\x20\xFE\xCD" \
    "\x1C\x03\x18\x02\x00\x00\xCD\xD0\x05\xAF\xE0\x70\x3E\x11\xE0\x50";

static const Byte gbcBootrom2[] =
        "\x21\x00\x80\xAF\x22\xCB\x6C\x28\xFB\xC9\x2A\x12\x13\x0D\x20\xFA" \
    "\xC9\xE5\x21\x0F\xFF\xCB\x86\xCB\x46\x28\xFC\xE1\xC9\x11\x00\xFF" \
    "\x21\x03\xD0\x0E\x0F\x3E\x30\x12\x3E\x20\x12\x1A\x2F\xA1\xCB\x37" \
    "\x47\x3E\x10\x12\x1A\x2F\xA1\xB0\x4F\x7E\xA9\xE6\xF0\x47\x2A\xA9" \
    "\xA1\xB0\x32\x47\x79\x77\x3E\x30\x12\xC9\x3E\x80\xE0\x68\xE0\x6A" \
    "\x0E\x6B\x2A\xE2\x05\x20\xFB\x4A\x09\x43\x0E\x69\x2A\xE2\x05\x20" \
    "\xFB\xC9\xC5\xD5\xE5\x21\x00\xD8\x06\x01\x16\x3F\x1E\x40\xCD\x4A" \
    "\x02\xE1\xD1\xC1\xC9\x3E\x80\xE0\x26\xE0\x11\x3E\xF3\xE0\x12\xE0" \
    "\x25\x3E\x77\xE0\x24\x21\x30\xFF\xAF\x0E\x10\x22\x2F\x0D\x20\xFB" \
    "\xC9\xCD\x11\x02\xCD\x62\x02\x79\xFE\x38\x20\x14\xE5\xAF\xE0\x4F" \
    "\x21\xA7\x99\x3E\x38\x22\x3C\xFE\x3F\x20\xFA\x3E\x01\xE0\x4F\xE1" \
    "\xC5\xE5\x21\x43\x01\xCB\x7E\xCC\x89\x05\xE1\xC1\xCD\x11\x02\x79" \
    "\xD6\x30\xD2\x06\x03\x79\xFE\x01\xCA\x06\x03\x7D\xFE\xD1\x28\x21" \
    "\xC5\x06\x03\x0E\x01\x16\x03\x7E\xE6\xF8\xB1\x22\x15\x20\xF8\x0C" \
    "\x79\xFE\x06\x20\xF0\x11\x11\x00\x19\x05\x20\xE7\x11\xA1\xFF\x19" \
    "\xC1\x04\x78\x1E\x83\xFE\x62\x28\x06\x1E\xC1\xFE\x64\x20\x07\x7B" \
    "\xE0\x13\x3E\x87\xE0\x14\xFA\x02\xD0\xFE\x00\x28\x0A\x3D\xEA\x02" \
    "\xD0\x79\xFE\x01\xCA\x91\x02\x0D\xC2\x91\x02\xC9\x0E\x26\xCD\x4A" \
    "\x03\xCD\x11\x02\xCD\x62\x02\x0D\x20\xF4\xCD\x11\x02\x3E\x01\xE0" \
    "\x4F\xCD\x3E\x03\xCD\x41\x03\xAF\xE0\x4F\xCD\x3E\x03\xC9\x21\x08" \
    "\x00\x11\x51\xFF\x0E\x05\xCD\x0A\x02\xC9\xC5\xD5\xE5\x21\x40\xD8" \
    "\x0E\x20\x7E\xE6\x1F\xFE\x1F\x28\x01\x3C\x57\x2A\x07\x07\x07\xE6" \
    "\x07\x47\x3A\x07\x07\x07\xE6\x18\xB0\xFE\x1F\x28\x01\x3C\x0F\x0F" \
    "\x0F\x47\xE6\xE0\xB2\x22\x78\xE6\x03\x5F\x7E\x0F\x0F\xE6\x1F\xFE" \
    "\x1F\x28\x01\x3C\x07\x07\xB3\x22\x0D\x20\xC7\xE1\xD1\xC1\xC9\x0E" \
    "\x00\x1A\xE6\xF0\xCB\x49\x28\x02\xCB\x37\x47\x23\x7E\xB0\x22\x1A" \
    "\xE6\x0F\xCB\x49\x20\x02\xCB\x37\x47\x23\x7E\xB0\x22\x13\xCB\x41" \
    "\x28\x0D\xD5\x11\xF8\xFF\xCB\x49\x28\x03\x11\x08\x00\x19\xD1\x0C" \
    "\x79\xFE\x18\x20\xCC\xC9\x47\xD5\x16\x04\x58\xCB\x10\x17\xCB\x13" \
    "\x17\x15\x20\xF6\xD1\x22\x23\x22\x23\xC9\x3E\x19\xEA\x10\x99\x21" \
    "\x2F\x99\x0E\x0C\x3D\x28\x08\x32\x0D\x20\xF9\x2E\x0F\x18\xF3\xC9" \
    "\x3E\x01\xE0\x4F\xCD\x00\x02\x11\x07\x06\x21\x80\x80\x0E\xC0\x1A" \
    "\x22\x23\x22\x23\x13\x0D\x20\xF7\x11\x04\x01\xCD\x8F\x03\x01\xA8" \
    "\xFF\x09\xCD\x8F\x03\x01\xF8\xFF\x09\x11\x72\x00\x0E\x08\x23\x1A" \
    "\x22\x13\x0D\x20\xF9\x21\xC2\x98\x06\x08\x3E\x08\x0E\x10\x22\x0D" \
    "\x20\xFC\x11\x10\x00\x19\x05\x20\xF3\xAF\xE0\x4F\x21\xC2\x98\x3E" \
    "\x08\x22\x3C\xFE\x18\x20\x02\x2E\xE2\xFE\x28\x20\x03\x21\x02\x99" \
    "\xFE\x38\x20\xED\x21\xD8\x08\x11\x40\xD8\x06\x08\x3E\xFF\x12\x13" \
    "\x12\x13\x0E\x02\xCD\x0A\x02\x3E\x00\x12\x13\x12\x13\x13\x13\x05" \
    "\x20\xEA\xCD\x62\x02\x21\x4B\x01\x7E\xFE\x33\x20\x0B\x2E\x44\x1E" \
    "\x30\x2A\xBB\x20\x49\x1C\x18\x04\x2E\x4B\x1E\x01\x2A\xBB\x20\x3E" \
    "\x2E\x34\x01\x10\x00\x2A\x80\x47\x0D\x20\xFA\xEA\x00\xD0\x21\xC7" \
    "\x06\x0E\x00\x2A\xB8\x28\x08\x0C\x79\xFE\x4F\x20\xF6\x18\x1F\x79" \
    "\xD6\x41\x38\x1C\x21\x16\x07\x16\x00\x5F\x19\xFA\x37\x01\x57\x7E" \
    "\xBA\x28\x0D\x11\x0E\x00\x19\x79\x83\x4F\xD6\x5E\x38\xED\x0E\x00" \
    "\x21\x33\x07\x06\x00\x09\x7E\xE6\x1F\xEA\x08\xD0\x7E\xE6\xE0\x07" \
    "\x07\x07\xEA\x0B\xD0\xCD\xE9\x04\xC9\x11\x91\x07\x21\x00\xD9\xFA" \
    "\x0B\xD0\x47\x0E\x1E\xCB\x40\x20\x02\x13\x13\x1A\x22\x20\x02\x1B" \
    "\x1B\xCB\x48\x20\x02\x13\x13\x1A\x22\x13\x13\x20\x02\x1B\x1B\xCB" \
    "\x50\x28\x05\x1B\x2B\x1A\x22\x13\x1A\x22\x13\x0D\x20\xD7\x21\x00" \
    "\xD9\x11\x00\xDA\xCD\x64\x05\xC9\x21\x12\x00\xFA\x05\xD0\x07\x07" \
    "\x06\x00\x4F\x09\x11\x40\xD8\x06\x08\xE5\x0E\x02\xCD\x0A\x02\x13" \
    "\x13\x13\x13\x13\x13\xE1\x05\x20\xF0\x11\x42\xD8\x0E\x02\xCD\x0A" \
    "\x02\x11\x4A\xD8\x0E\x02\xCD\x0A\x02\x2B\x2B\x11\x44\xD8\x0E\x02" \
    "\xCD\x0A\x02\xC9\x0E\x60\x2A\xE5\xC5\x21\xE8\x07\x06\x00\x4F\x09" \
    "\x0E\x08\xCD\x0A\x02\xC1\xE1\x0D\x20\xEC\xC9\xFA\x08\xD0\x11\x18" \
    "\x00\x3C\x3D\x28\x03\x19\x20\xFA\xC9\xCD\x1D\x02\x78\xE6\xFF\x28" \
    "\x0F\x21\xE4\x08\x06\x00\x2A\xB9\x28\x08\x04\x78\xFE\x0C\x20\xF6" \
    "\x18\x2D\x78\xEA\x05\xD0\x3E\x1E\xEA\x02\xD0\x11\x0B\x00\x19\x56" \
    "\x7A\xE6\x1F\x5F\x21\x08\xD0\x3A\x22\x7B\x77\x7A\xE6\xE0\x07\x07" \
    "\x07\x5F\x21\x0B\xD0\x3A\x22\x7B\x77\xCD\xE9\x04\xCD\x28\x05\xC9" \
    "\xCD\x11\x02\xFA\x43\x01\xCB\x7F\x28\x04\xE0\x4C\x18\x28\x3E\x04" \
    "\xE0\x4C\x3E\x01\xE0\x6C\x21\x00\xDA\xCD\x7B\x05\x06\x10\x16\x00" \
    "\x1E\x08\xCD\x4A\x02\x21\x7A\x00\xFA\x00\xD0\x47\x0E\x02\x2A\xB8" \
    "\xCC\xDA\x03\x0D\x20\xF8\xC9\x01\x0F\x3F\x7E\xFF\xFF\xC0\x00\xC0" \
    "\xF0\xF1\x03\x7C\xFC\xFE\xFE\x03\x07\x07\x0F\xE0\xE0\xF0\xF0\x1E" \
    "\x3E\x7E\xFE\x0F\x0F\x1F\x1F\xFF\xFF\x00\x00\x01\x01\x01\x03\xFF" \
    "\xFF\xE1\xE0\xC0\xF0\xF9\xFB\x1F\x7F\xF8\xE0\xF3\xFD\x3E\x1E\xE0" \
    "\xF0\xF9\x7F\x3E\x7C\xF8\xE0\xF8\xF0\xF0\xF8\x00\x00\x7F\x7F\x07" \
    "\x0F\x9F\xBF\x9E\x1F\xFF\xFF\x0F\x1E\x3E\x3C\xF1\xFB\x7F\x7F\xFE" \
    "\xDE\xDF\x9F\x1F\x3F\x3E\x3C\xF8\xF8\x00\x00\x03\x03\x07\x07\xFF" \
    "\xFF\xC1\xC0\xF3\xE7\xF7\xF3\xC0\xC0\xC0\xC0\x1F\x1F\x1E\x3E\x3F" \
    "\x1F\x3E\x3E\x80\x00\x00\x00\x7C\x1F\x07\x00\x0F\xFF\xFE\x00\x7C" \
    "\xF8\xF0\x00\x1F\x0F\x0F\x00\x7C\xF8\xF8\x00\x3F\x3E\x1C\x00\x0F" \
    "\x0F\x0F\x00\x7C\xFF\xFF\x00\x00\xF8\xF8\x00\x07\x0F\x0F\x00\x81" \
    "\xFF\xFF\x00\xF3\xE1\x80\x00\xE0\xFF\x7F\x00\xFC\xF0\xC0\x00\x3E" \
    "\x7C\x7C\x00\x00\x00\x00\x00\x00\x88\x16\x36\xD1\xDB\xF2\x3C\x8C" \
    "\x92\x3D\x5C\x58\xC9\x3E\x70\x1D\x59\x69\x19\x35\xA8\x14\xAA\x75" \
    "\x95\x99\x34\x6F\x15\xFF\x97\x4B\x90\x17\x10\x39\xF7\xF6\xA2\x49" \
    "\x4E\x43\x68\xE0\x8B\xF0\xCE\x0C\x29\xE8\xB7\x86\x9A\x52\x01\x9D" \
    "\x71\x9C\xBD\x5D\x6D\x67\x3F\x6B\xB3\x46\x28\xA5\xC6\xD3\x27\x61" \
    "\x18\x66\x6A\xBF\x0D\xF4\x42\x45\x46\x41\x41\x52\x42\x45\x4B\x45" \
    "\x4B\x20\x52\x2D\x55\x52\x41\x52\x20\x49\x4E\x41\x49\x4C\x49\x43" \
    "\x45\x20\x52\x7C\x08\x12\xA3\xA2\x07\x87\x4B\x20\x12\x65\xA8\x16" \
    "\xA9\x86\xB1\x68\xA0\x87\x66\x12\xA1\x30\x3C\x12\x85\x12\x64\x1B" \
    "\x07\x06\x6F\x6E\x6E\xAE\xAF\x6F\xB2\xAF\xB2\xA8\xAB\x6F\xAF\x86" \
    "\xAE\xA2\xA2\x12\xAF\x13\x12\xA1\x6E\xAF\xAF\xAD\x06\x4C\x6E\xAF" \
    "\xAF\x12\x7C\xAC\xA8\x6A\x6E\x13\xA0\x2D\xA8\x2B\xAC\x64\xAC\x6D" \
    "\x87\xBC\x60\xB4\x13\x72\x7C\xB5\xAE\xAE\x7C\x7C\x65\xA2\x6C\x64" \
    "\x85\x80\xB0\x40\x88\x20\x68\xDE\x00\x70\xDE\x20\x78\x20\x20\x38" \
    "\x20\xB0\x90\x20\xB0\xA0\xE0\xB0\xC0\x98\xB6\x48\x80\xE0\x50\x1E" \
    "\x1E\x58\x20\xB8\xE0\x88\xB0\x10\x20\x00\x10\x20\xE0\x18\xE0\x18" \
    "\x00\x18\xE0\x20\xA8\xE0\x20\x18\xE0\x00\x20\x18\xD8\xC8\x18\xE0" \
    "\x00\xE0\x40\x28\x28\x28\x18\xE0\x60\x20\x18\xE0\x00\x00\x08\xE0" \
    "\x18\x30\xD0\xD0\xD0\x20\xE0\xE8\xFF\x7F\xBF\x32\xD0\x00\x00\x00" \
    "\x9F\x63\x79\x42\xB0\x15\xCB\x04\xFF\x7F\x31\x6E\x4A\x45\x00\x00" \
    "\xFF\x7F\xEF\x1B\x00\x02\x00\x00\xFF\x7F\x1F\x42\xF2\x1C\x00\x00" \
    "\xFF\x7F\x94\x52\x4A\x29\x00\x00\xFF\x7F\xFF\x03\x2F\x01\x00\x00" \
    "\xFF\x7F\xEF\x03\xD6\x01\x00\x00\xFF\x7F\xB5\x42\xC8\x3D\x00\x00" \
    "\x74\x7E\xFF\x03\x80\x01\x00\x00\xFF\x67\xAC\x77\x13\x1A\x6B\x2D" \
    "\xD6\x7E\xFF\x4B\x75\x21\x00\x00\xFF\x53\x5F\x4A\x52\x7E\x00\x00" \
    "\xFF\x4F\xD2\x7E\x4C\x3A\xE0\x1C\xED\x03\xFF\x7F\x5F\x25\x00\x00" \
    "\x6A\x03\x1F\x02\xFF\x03\xFF\x7F\xFF\x7F\xDF\x01\x12\x01\x00\x00" \
    "\x1F\x23\x5F\x03\xF2\x00\x09\x00\xFF\x7F\xEA\x03\x1F\x01\x00\x00" \
    "\x9F\x29\x1A\x00\x0C\x00\x00\x00\xFF\x7F\x7F\x02\x1F\x00\x00\x00" \
    "\xFF\x7F\xE0\x03\x06\x02\x20\x01\xFF\x7F\xEB\x7E\x1F\x00\x00\x7C" \
    "\xFF\x7F\xFF\x3F\x00\x7E\x1F\x00\xFF\x7F\xFF\x03\x1F\x00\x00\x00" \
    "\xFF\x03\x1F\x00\x0C\x00\x00\x00\xFF\x7F\x3F\x03\x93\x01\x00\x00" \
    "\x00\x00\x00\x42\x7F\x03\xFF\x7F\xFF\x7F\x8C\x7E\x00\x7C\x00\x00" \
    "\xFF\x7F\xEF\x1B\x80\x61\x00\x00\xFF\x7F\x00\x7C\xE0\x03\x1F\x7C" \
    "\x1F\x00\xFF\x03\x40\x41\x42\x20\x21\x22\x80\x81\x82\x10\x11\x12" \
    "\x12\xB0\x79\xB8\xAD\x16\x17\x07\xBA\x05\x7C\x13\x00\x00\x00\x00";

void Bus::tickDma(int cycles) {
    if (!dmaInProgress) {
        return;
    }

    assert(cycles % 4 == 0);
    const int maxCycles = 4 * 4 * 40; // XXX: does it really take 4 cycles for each byte?
    int nextCycles = std::min(dmaCycles + cycles, maxCycles);

    for (int i = dmaCycles / 4; i < nextCycles / 4; i++) {
        Byte data = 0;
        memAccess((dmaSourcePage << 8) | i, &data, false, "DMA");
        gpu->oamAccess(i, &data, true);
    }

    dmaCycles = nextCycles;
    if (nextCycles == maxCycles) {
        dmaInProgress = false;
    }
}

void Bus::dmaRegAccess(Byte* pData, bool isWrite) {
    if (isWrite) {
        dmaInProgress = true;
        dmaCycles = 0;
        dmaSourcePage = *pData;
    } else {
        *pData = dmaSourcePage;
    }
}

void Bus::disableBootrom() {
    bootromEnabled = false;
}

void Bus::memAccess(Word address, Byte* pData, bool isWrite, MemAccessType accessType) {
    if (address <= 0xff && bootromEnabled) {
        if (isWrite) {
            log->warn("Write to BootRom");
        } else {
            BusUtil::arrayMemAccess(const_cast<Byte*>(isGbcMode() ? gbcBootrom1 : dmgBootrom), address, pData, false);
        }
    } else if (isGbcMode() && bootromEnabled && address >= 0x0200 && address <= 0x08ff) {
        if (isWrite) {
            log->warn("Write to BootRom");
        } else {
            BusUtil::arrayMemAccess(const_cast<Byte*>(gbcBootrom2), address - 0x0200, pData, false);
        }
    } else if (address <= 0x7fff) {
        rom->cartRomAccess(address, pData, isWrite);
    } else if (address <= 0x9fff) {
        gpu->vramAccess(address & 0x1fff, pData, isWrite);
    } else if (address <= 0xbfff) {
        rom->cartRamAccess(address & 0x1fff, pData, isWrite);
    } else if (address <= 0xfdff) {
        BusUtil::arrayMemAccess(ram, address & 0x1fff, pData, isWrite);
    } else if (address <= 0xfe9f) {
        gpu->oamAccess(address & 0xff, pData, isWrite);
    } else if (address == 0xff00) {
        joypad->regAccess(pData, isWrite);
    } else if (address >= 0xff01 && address <= 0xff02) {
        serial->regAccess(address - 0xff01, pData, isWrite);
    } else if (address >= 0xff04 && address <= 0xff07) {
        timer->regAccess(address, pData, isWrite);
    } else if (address == 0xff0f) {
        BusUtil::simpleRegAccess(&irqsPending, pData, isWrite, 0x1f);
    } else if (address >= 0xff10 && address <= 0xff3f) {
        sound->registerAccess(address, pData, isWrite);
    } else if (address == 0xff46) {
        dmaRegAccess(pData, isWrite);
    } else if (address >= 0xff40 && address <= 0xff4b) {
        gpu->registerAccess(address, pData, isWrite);
    } else if (address == 0xff50) {
        disableBootrom();
    } else if (address >= 0xff80 && address <= 0xfffe) {
        BusUtil::arrayMemAccess(hram, address - 0xff80, pData, isWrite);
    } else if (address == 0xffff) {
        BusUtil::simpleRegAccess(&irqsEnabled, pData, isWrite, 0x1f);
    } else {
        if (isWrite) {
            log->warn("Unhandled write (0x%02x) to address 0x%04X", *pData, address);
        } else {
            log->warn("Unhandled read from address 0x%04X", address);
        }
    }

#ifndef CONFIG_NO_INSN_TRACE
    if (!bootromEnabled && accessType) {
        log->logMemoryAccess(address, *pData, isWrite, accessType);
    }
#endif
}

Byte Bus::memRead8(Word address, MemAccessType accessType) {
    Byte value = 0;
    memAccess(address, &value, false, accessType);
    return value;
}

void Bus::memWrite8(Word address, Byte value, MemAccessType accessType) {
    memAccess(address, &value, true, accessType);
}

Word Bus::memRead16(Word address, MemAccessType accessType) {
    return memRead8(address, accessType) | (memRead8(address + 1, accessType) << 8);
}

void Bus::memWrite16(Word address, Word value, MemAccessType accessType) {
    memWrite8(address, (Byte)(value), accessType);
    memWrite8(address + 1, (Byte)(value >> 8), accessType);
}

void Bus::raiseIrq(IrqSet irqs) {
    irqsPending |= irqs; // TODO: should this be masked with irqsEnabled???
}

void Bus::ackIrq(Irq irq) {
    if (!(irqsPending & (1 << irq))) {
        log->warn("IRQ %d not pending?", irq);
    }
    irqsPending &= ~(1 << irq);
}

IrqSet Bus::getEnabledIrqs() {
    return irqsEnabled;
}

IrqSet Bus::getPendingIrqs() {
    return irqsPending & irqsEnabled;
}

bool Bus::isBootromEnabled() {
    return bootromEnabled;
}

bool Bus::isGbcMode() {
    return isGbc;
}

void Bus::serialize(Serializer& ser) {
    ser.handleObject("Bus.dmaInProgress", dmaInProgress);
    ser.handleObject("Bus.dmaCycles", dmaCycles);
    ser.handleObject("Bus.dmaSourcePage", dmaSourcePage);
    ser.handleObject("Bus.irqsEnabled", irqsEnabled);
    ser.handleObject("Bus.irqsPending", irqsPending);
    ser.handleObject("Bus.ram", ram);
    ser.handleObject("Bus.hram", hram);
}
